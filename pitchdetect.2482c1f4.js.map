{"version":3,"sources":["src/pitchdetect.ts"],"names":[],"mappings":"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","file":"pitchdetect.2482c1f4.js","sourceRoot":"..","sourcesContent":["/*\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2014 Chris Wilson\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n\r\n\r\n\r\n\r\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\r\n\r\nimport sampleAuidoSrc from \"../sounds/file_example_OOG_1MG.ogg\";\r\n\r\nconst $ = document.querySelector.bind(document)\r\n\r\n\r\nlet audioContext: AudioContext | null = null;\r\nvar isPlaying: boolean = false;\r\nvar sourceNode: AudioBufferSourceNode | OscillatorNode | null = null;\r\nlet analyser: AnalyserNode | null = null;\r\nlet theBuffer: AudioBuffer | null = null;\r\nlet DEBUGCANVAS: HTMLCanvasElement;\r\nvar mediaStreamSource: MediaStreamAudioSourceNode | null = null;\r\nlet detectorElem: HTMLDivElement | null;\r\nlet canvasElem: HTMLElement | null;\r\nlet waveCanvas: CanvasRenderingContext2D | null;\r\nlet pitchElem: HTMLDivElement | null;\r\nlet noteElem: HTMLDivElement | null;\r\nlet detuneElem: HTMLDivElement | null;\r\nlet detuneAmount: HTMLDivElement | null;\r\n\r\nlet MAX_SIZE: number;\r\nlet isLiveInput: boolean;\r\nwindow.onload = function () {\r\n\taudioContext = new AudioContext();\r\n\tMAX_SIZE = Math.max(4, Math.floor(audioContext.sampleRate / 5000));\t// corresponds to a 5kHz signal\r\n\tlet request = new XMLHttpRequest();\r\n\trequest.open(\"GET\", sampleAuidoSrc, true);\r\n\trequest.responseType = \"arraybuffer\";\r\n\trequest.onload = function () {\r\n\t\taudioContext!.decodeAudioData(request.response, function (buffer) {\r\n\t\t\ttheBuffer = buffer;\r\n\t\t});\r\n\t}\r\n\trequest.send();\r\n\r\n\tdetectorElem = document.getElementById(\"detector\") as HTMLDivElement;\r\n\tcanvasElem = document.getElementById(\"output\");\r\n\tDEBUGCANVAS = document.getElementById(\"waveform\") as HTMLCanvasElement;\r\n\tif (DEBUGCANVAS) {\r\n\t\twaveCanvas = DEBUGCANVAS.getContext(\"2d\");\r\n\t\twaveCanvas!.strokeStyle = \"black\";\r\n\t\twaveCanvas!.lineWidth = 1;\r\n\t}\r\n\tpitchElem = document.getElementById(\"pitch\") as HTMLDivElement;\r\n\tnoteElem = document.getElementById(\"note\") as HTMLDivElement;\r\n\tdetuneElem = document.getElementById(\"detune\") as HTMLDivElement;\r\n\tdetuneAmount = document.getElementById(\"detune_amt\") as HTMLDivElement;\r\n\r\n\tdetectorElem.ondragenter = function () {\r\n\t\t(this as HTMLDivElement).classList.add(\"droptarget\");\r\n\t\treturn false;\r\n\t};\r\n\tdetectorElem.ondragleave = function () {\r\n\t\t(this as HTMLDivElement).classList.remove(\"droptarget\"); return false;\r\n\t};\r\n\tdetectorElem.ondrop = function (e) {\r\n\t\t(this as HTMLDivElement).classList.remove(\"droptarget\");\r\n\t\te.preventDefault();\r\n\t\ttheBuffer = null;\r\n\r\n\t\tvar reader = new FileReader();\r\n\t\treader.onload = function (event) {\r\n\t\t\taudioContext!.decodeAudioData(event.target!.result as ArrayBuffer, function (buffer) {\r\n\t\t\t\ttheBuffer = buffer;\r\n\t\t\t}, function () { alert(\"error loading!\"); });\r\n\r\n\t\t};\r\n\t\treader.onerror = function (event) {\r\n\t\t\talert(\"Error: \" + reader.error);\r\n\t\t};\r\n\t\treader.readAsArrayBuffer(e.dataTransfer!.files[0]);\r\n\t\treturn false;\r\n\t};\r\n\r\n\r\n\r\n}\r\n\r\nfunction error() {\r\n\talert('Stream generation failed.');\r\n}\r\n\r\nfunction getUserMedia(dictionary: MediaStreamConstraints, callback: NavigatorUserMediaSuccessCallback) {\r\n\ttry {\r\n\t\t// @ts-ignore\r\n\t\tnavigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n\t\tnavigator.getUserMedia(dictionary, callback, error);\r\n\t} catch (e) {\r\n\t\talert('getUserMedia threw exception :' + e);\r\n\t}\r\n}\r\n\r\nfunction gotStream(stream: MediaStream) {\r\n\t// Create an AudioNode from the stream.\r\n\tmediaStreamSource = audioContext!.createMediaStreamSource(stream);\r\n\r\n\t// Connect it to the destination.\r\n\tanalyser = audioContext!.createAnalyser();\r\n\tanalyser.fftSize = 2048;\r\n\tmediaStreamSource.connect(analyser);\r\n\tupdatePitch();\r\n}\r\n\r\nfunction toggleOscillator() {\r\n\tif (isPlaying) {\r\n\t\t//stop playing and return\r\n\t\t(sourceNode as OscillatorNode).stop(0);\r\n\t\tsourceNode = null;\r\n\t\tanalyser = null;\r\n\t\tisPlaying = false;\r\n\t\tif (!window.cancelAnimationFrame)\r\n\t\t\twindow.cancelAnimationFrame = window.webkitCancelAnimationFrame;\r\n\t\twindow.cancelAnimationFrame(rafID);\r\n\t\treturn \"play oscillator\";\r\n\t}\r\n\tsourceNode = audioContext!.createOscillator();\r\n\tanalyser = audioContext!.createAnalyser();\r\n\tanalyser.fftSize = 4096;\r\n\tsourceNode.connect(analyser);\r\n\tanalyser.connect(audioContext!.destination);\r\n\tsourceNode.start(0);\r\n\tisPlaying = true;\r\n\tisLiveInput = false;\r\n\tupdatePitch();\r\n\r\n\treturn \"stop\";\r\n}\r\n\r\nfunction toggleLiveInput() {\r\n\tif (isPlaying) {\r\n\t\t//stop playing and return\r\n\t\t(sourceNode as OscillatorNode)!.stop(0);\r\n\t\tsourceNode = null;\r\n\t\tanalyser = null;\r\n\t\tisPlaying = false;\r\n\t\tif (!window.cancelAnimationFrame)\r\n\t\t\twindow.cancelAnimationFrame = window.webkitCancelAnimationFrame;\r\n\t\twindow.cancelAnimationFrame(rafID);\r\n\t}\r\n\tgetUserMedia(\r\n\t\t{\r\n\t\t\taudio: {\r\n\t\t\t\tmandatory: {\r\n\t\t\t\t\t\"googEchoCancellation\": \"false\",\r\n\t\t\t\t\t\"googAutoGainControl\": \"false\",\r\n\t\t\t\t\t\"googNoiseSuppression\": \"false\",\r\n\t\t\t\t\t\"googHighpassFilter\": \"false\"\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t}, gotStream);\r\n}\r\n\r\n\r\nfunction togglePlayback() {\r\n\tif (isPlaying) {\r\n\t\t//stop playing and return\r\n\t\tsourceNode!.stop(0);\r\n\t\tsourceNode = null;\r\n\t\tanalyser = null;\r\n\t\tisPlaying = false;\r\n\t\tif (!window.cancelAnimationFrame)\r\n\t\t\twindow.cancelAnimationFrame = window.webkitCancelAnimationFrame;\r\n\t\twindow.cancelAnimationFrame(rafID);\r\n\t\treturn \"start\";\r\n\t}\r\n\r\n\tsourceNode = audioContext!.createBufferSource();\r\n\tsourceNode.buffer = theBuffer;\r\n\tsourceNode.loop = true;\r\n\r\n\tanalyser = audioContext!.createAnalyser();\r\n\tanalyser.fftSize = 2048;\r\n\tsourceNode.connect(analyser);\r\n\tanalyser.connect(audioContext!.destination);\r\n\tsourceNode.start(0);\r\n\tisPlaying = true;\r\n\tisLiveInput = false;\r\n\tupdatePitch();\r\n\r\n\treturn \"stop\";\r\n}\r\n\r\n$('#useDemo')!.addEventListener('click', togglePlayback)\r\n$('#useLive')!.addEventListener('click', toggleLiveInput)\r\n$('#useOscill')!.addEventListener('click', toggleOscillator)\r\n\r\n\r\nlet rafID: number;\r\n\r\nlet buflen: number = 1024;\r\nlet buf: Float32Array = new Float32Array(buflen);\r\n\r\nconst noteStrings = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\r\n\r\nfunction noteFromPitch(frequency: number) {\r\n\tvar noteNum = 12 * (Math.log(frequency / 440) / Math.log(2));\r\n\treturn Math.round(noteNum) + 69;\r\n}\r\n\r\nfunction frequencyFromNoteNumber(note: number) {\r\n\treturn 440 * Math.pow(2, (note - 69) / 12);\r\n}\r\n\r\nfunction centsOffFromPitch(frequency: number, note: number) {\r\n\treturn Math.floor(1200 * Math.log(frequency / frequencyFromNoteNumber(note)) / Math.log(2));\r\n}\r\n\r\n// this is a float version of the algorithm below - but it's not currently used.\r\n/*\r\nfunction autoCorrelateFloat( buf, sampleRate ) {\r\n\tvar MIN_SAMPLES = 4;\t// corresponds to an 11kHz signal\r\n\tvar MAX_SAMPLES = 1000; // corresponds to a 44Hz signal\r\n\tvar SIZE = 1000;\r\n\tvar best_offset = -1;\r\n\tvar best_correlation = 0;\r\n\tvar rms = 0;\r\n\r\n\tif (buf.length < (SIZE + MAX_SAMPLES - MIN_SAMPLES))\r\n\t\treturn -1;  // Not enough data\r\n\r\n\tfor (var i=0;i<SIZE;i++)\r\n\t\trms += buf[i]*buf[i];\r\n\trms = Math.sqrt(rms/SIZE);\r\n\r\n\tfor (var offset = MIN_SAMPLES; offset <= MAX_SAMPLES; offset++) {\r\n\t\tvar correlation = 0;\r\n\r\n\t\tfor (var i=0; i<SIZE; i++) {\r\n\t\t\tcorrelation += Math.abs(buf[i]-buf[i+offset]);\r\n\t\t}\r\n\t\tcorrelation = 1 - (correlation/SIZE);\r\n\t\tif (correlation > best_correlation) {\r\n\t\t\tbest_correlation = correlation;\r\n\t\t\tbest_offset = offset;\r\n\t\t}\r\n\t}\r\n\tif ((rms>0.1)&&(best_correlation > 0.1)) {\r\n\t\tconsole.log(\"f = \" + sampleRate/best_offset + \"Hz (rms: \" + rms + \" confidence: \" + best_correlation + \")\");\r\n\t}\r\n//\tvar best_frequency = sampleRate/best_offset;\r\n}\r\n*/\r\n\r\nvar MIN_SAMPLES = 0;  // will be initialized when AudioContext is created.\r\nvar GOOD_ENOUGH_CORRELATION = 0.9; // this is the \"bar\" for how close a correlation needs to be\r\n\r\nfunction autoCorrelate(buf: Float32Array, sampleRate: number) {\r\n\tvar SIZE = buf.length;\r\n\tvar MAX_SAMPLES = Math.floor(SIZE / 2);\r\n\tvar best_offset = -1;\r\n\tvar best_correlation = 0;\r\n\tvar rms = 0;\r\n\tvar foundGoodCorrelation = false;\r\n\tvar correlations = new Array(MAX_SAMPLES);\r\n\r\n\tfor (var i = 0; i < SIZE; i++) {\r\n\t\tvar val = buf[i];\r\n\t\trms += val * val;\r\n\t}\r\n\trms = Math.sqrt(rms / SIZE);\r\n\tif (rms < 0.01) // not enough signal\r\n\t\treturn -1;\r\n\r\n\tvar lastCorrelation = 1;\r\n\tfor (var offset = MIN_SAMPLES; offset < MAX_SAMPLES; offset++) {\r\n\t\tvar correlation = 0;\r\n\r\n\t\tfor (var i = 0; i < MAX_SAMPLES; i++) {\r\n\t\t\tcorrelation += Math.abs((buf[i]) - (buf[i + offset]));\r\n\t\t}\r\n\t\tcorrelation = 1 - (correlation / MAX_SAMPLES);\r\n\t\tcorrelations[offset] = correlation; // store it, for the tweaking we need to do below.\r\n\t\tif ((correlation > GOOD_ENOUGH_CORRELATION) && (correlation > lastCorrelation)) {\r\n\t\t\tfoundGoodCorrelation = true;\r\n\t\t\tif (correlation > best_correlation) {\r\n\t\t\t\tbest_correlation = correlation;\r\n\t\t\t\tbest_offset = offset;\r\n\t\t\t}\r\n\t\t} else if (foundGoodCorrelation) {\r\n\t\t\t// short-circuit - we found a good correlation, then a bad one, so we'd just be seeing copies from here.\r\n\t\t\t// Now we need to tweak the offset - by interpolating between the values to the left and right of the\r\n\t\t\t// best offset, and shifting it a bit.  This is complex, and HACKY in this code (happy to take PRs!) -\r\n\t\t\t// we need to do a curve fit on correlations[] around best_offset in order to better determine precise\r\n\t\t\t// (anti-aliased) offset.\r\n\r\n\t\t\t// we know best_offset >=1, \r\n\t\t\t// since foundGoodCorrelation cannot go to true until the second pass (offset=1), and \r\n\t\t\t// we can't drop into this clause until the following pass (else if).\r\n\t\t\tvar shift = (correlations[best_offset + 1] - correlations[best_offset - 1]) / correlations[best_offset];\r\n\t\t\treturn sampleRate / (best_offset + (8 * shift));\r\n\t\t}\r\n\t\tlastCorrelation = correlation;\r\n\t}\r\n\tif (best_correlation > 0.01) {\r\n\t\t// console.log(\"f = \" + sampleRate/best_offset + \"Hz (rms: \" + rms + \" confidence: \" + best_correlation + \")\")\r\n\t\treturn sampleRate / best_offset;\r\n\t}\r\n\treturn -1;\r\n\t//\tvar best_frequency = sampleRate/best_offset;\r\n}\r\n\r\nfunction updatePitch(time?: number) {\r\n\tvar cycles = new Array;\r\n\tanalyser!.getFloatTimeDomainData(buf);\r\n\tvar ac = autoCorrelate(buf, audioContext!.sampleRate);\r\n\t// TODO: Paint confidence meter on canvasElem here.\r\n\r\n\tif (DEBUGCANVAS && waveCanvas) {  // This draws the current waveform, useful for debugging\r\n\t\twaveCanvas.clearRect(0, 0, 512, 256);\r\n\t\twaveCanvas.strokeStyle = \"red\";\r\n\t\twaveCanvas.beginPath();\r\n\t\twaveCanvas.moveTo(0, 0);\r\n\t\twaveCanvas.lineTo(0, 256);\r\n\t\twaveCanvas.moveTo(128, 0);\r\n\t\twaveCanvas.lineTo(128, 256);\r\n\t\twaveCanvas.moveTo(256, 0);\r\n\t\twaveCanvas.lineTo(256, 256);\r\n\t\twaveCanvas.moveTo(384, 0);\r\n\t\twaveCanvas.lineTo(384, 256);\r\n\t\twaveCanvas.moveTo(512, 0);\r\n\t\twaveCanvas.lineTo(512, 256);\r\n\t\twaveCanvas.stroke();\r\n\t\twaveCanvas.strokeStyle = \"black\";\r\n\t\twaveCanvas.beginPath();\r\n\t\twaveCanvas.moveTo(0, buf[0]);\r\n\t\tfor (var i = 1; i < 512; i++) {\r\n\t\t\twaveCanvas.lineTo(i, 128 + (buf[i] * 128));\r\n\t\t}\r\n\t\twaveCanvas.stroke();\r\n\t}\r\n\r\n\tif (!detectorElem || !pitchElem || !noteElem || !detuneElem || !detuneAmount) {\r\n\t\treturn\r\n\t}\r\n\tif (ac == -1) {\r\n\t\tdetectorElem.className = \"vague\";\r\n\t\tpitchElem.innerText = \"--\";\r\n\t\tnoteElem.innerText = \"-\";\r\n\t\tdetuneElem.className = \"\";\r\n\t\tdetuneAmount.innerText = \"--\";\r\n\t} else {\r\n\t\tdetectorElem.className = \"confident\";\r\n\t\tconst pitch = ac;\r\n\t\tpitchElem.innerText = Math.round(pitch) as unknown as string;\r\n\t\tvar note = noteFromPitch(pitch);\r\n\t\tnoteElem.innerHTML = noteStrings[note % 12];\r\n\t\tvar detune = centsOffFromPitch(pitch, note);\r\n\t\tif (detune == 0) {\r\n\t\t\tdetuneElem.className = \"\";\r\n\t\t\tdetuneAmount.innerHTML = \"--\";\r\n\t\t} else {\r\n\t\t\tif (detune < 0)\r\n\t\t\t\tdetuneElem.className = \"flat\";\r\n\t\t\telse\r\n\t\t\t\tdetuneElem.className = \"sharp\";\r\n\t\t\tdetuneAmount.innerHTML = Math.abs(detune) as unknown as string;\r\n\t\t}\r\n\t}\r\n\r\n\tif (!window.requestAnimationFrame)\r\n\t\twindow.requestAnimationFrame = window.webkitRequestAnimationFrame;\r\n\trafID = window.requestAnimationFrame(updatePitch);\r\n}\r\n"]}